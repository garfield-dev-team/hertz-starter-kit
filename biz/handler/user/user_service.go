// Code generated by hertz generator.

package user

import (
	"context"
	user "hertz-starter-kit/biz/model/user"
	"hertz-starter-kit/pkg/errcode"
	"hertz-starter-kit/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/pkg/errors"
	"go.uber.org/zap"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterRequest

	log := zap.L().Named("handler")

	// 注意，hertz 虽然也提供了一些 api 用于获取 query 参数、路径参数、body 、表单参数等
	// 这里推荐直接用 `c.BindAndValidate` 参数绑定到结构体，不需要关心从哪里获取参数
	// 默认情况下，可以绑定 query 参数、json 和 form 参数
	// 如果需要指定传参方式，则可以在 IDL 文件中添加自定义注解
	err = c.BindAndValidate(&req)
	if err != nil {
		// 业务代码中将错误存放到app.RequestContext中直接退出
		//c.String(consts.StatusBadRequest, err.Error())
		_ = c.Error(errors.WithStack(errcode.NewInvalidError(err)))
		return
	}

	log.Info("register", zap.Any("req", req))

	resp := new(user.RegisterResponse)

	utils.NewResp(c).Success(resp)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		_ = c.Error(errors.WithStack(errcode.NewInvalidError(err)))
		return
	}

	resp := new(user.LoginResponse)

	utils.NewResp(c).Success(resp)
}

// Info .
// @router /user/:username [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.InfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		_ = c.Error(errors.WithStack(errcode.NewInvalidError(err)))
		return
	}

	resp := new(user.InfoResponse)

	utils.NewResp(c).Success(resp)
}
